"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Callable, Generic, Optional, Tuple, TypeVar, Union

import torch.utils.data as data

T_co = TypeVar("T_co", covariant=True)

class VisionDataset(data.Dataset[T_co], Generic[T_co]):
    """
    Base Class For making datasets which are compatible with torchvision.
    It is necessary to override the ``__getitem__`` and ``__len__`` method.

    Args:
        root (string, optional): Root directory of dataset. Only used for `__repr__`.
        transforms (callable, optional): A function/transforms that takes in
            an image and a label and returns the transformed versions of both.
        transform (callable, optional): A function/transform that takes in a PIL image
            and returns a transformed version. E.g, ``transforms.RandomCrop``
        target_transform (callable, optional): A function/transform that takes in the
            target and transforms it.

    .. note::

        :attr:`transforms` and the combination of :attr:`transform` and :attr:`target_transform` are mutually exclusive.
    """

    _repr_indent = ...
    def __init__(
        self,
        root: Union[str, Path] = ...,
        transforms: Optional[Callable[..., Any]] = ...,
        transform: Optional[Callable[..., Any]] = ...,
        target_transform: Optional[Callable[..., Any]] = ...,
    ) -> None: ...
    def __getitem__(self, index: int) -> Any:
        """
        Args:
            index (int): Index

        Returns:
            (Any): Sample and meta data, optionally transformed by the respective transforms.
        """
        ...

    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def extra_repr(self) -> str: ...

class StandardTransform:
    def __init__(
        self,
        transform: Optional[Callable[..., Any]] = ...,
        target_transform: Optional[Callable[..., Any]] = ...,
    ) -> None: ...
    def __call__(self, input: Any, target: Any) -> Tuple[Any, Any]: ...
    def __repr__(self) -> str: ...
